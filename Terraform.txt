INSTALLING TERRAFORM: 

   52  yum install wget
   53  yum install wget unzip -y
   54  wget https://releases.hashicorp.com/terraform/0.15.1/terraform_0.15.1_linux_amd64.zip
   55  ls
   56  unzip terraform_0.15.1_linux_amd64.zip -d /usr/bin/
   57  terraform -v
--------------------------------------------------------------------------------------------------------------
CREATING FIRST INSTANCE:

   58  mkdir aws
   59  cd aws
   60  vi provider.tf

provider.tf:

provider "aws" {
  access_key = "AKIAU4VT5HACXYKCHW7O"
  secret_key = "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"    
  region = "ap-southeast-1"
}

   61  vi ec2.tf

ec2.tf:

resource "aws_instance" "manish" {
  ami = "ami-0fab0953c3bb514a9"
  instance_type = "t3a.micro"
}

   62  terraform init
   63  terraform plan
   64  terraform apply
   65  terraform destroy

---------------------------------------------------------------------------------------------------------------

id: AKIAU4VT5HACZCCRBBVO
key: TB2biIF6aGDBhg+lmJapBTddK5jppN4cP5Qtwf/z

SECURITY GROUP:

resource "aws_security_group" "trainee17" {
  name = "trainee17"
  tags = {
    Name = "traine17"
  }
  description = "allow ssh and http"
  vpc_id = "${var.vpcid}"
  ingress {
    from_port = 80
    to_port = 80
    protocol = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 22
    to_port = 22
    protocol = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

EC2 INSTANCE CREATION:

resource "aws_instance" "trainee17"{
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "t3a.micro"
  key_name = "trainee17"
  vpc_security_group_ids = ["sg-00c575739e40c1a4c"]
  user_data = <<EOF
    #!/bin/bash
    sudo yum update -y
    sudo yum install httpd -y
    sudo systemctl start httpd
    sudo systemctl enable httpd
    echo "Apache Deployed via terraform" | sudo tee /var/www/html/index.html
  EOF
  tags = {
    Name = "trainee17-ec2"
  }
}

VARIABLES:

variable "vpcid" {
  default = "vpc-03bc2714db843b6b0"
}
variable "region" {
  default = "ap-southeast-1"
}
variable "ami" {
  type = map
  default = {
    us-east-1 = "ami-048f6ed62451373d9"
    us-east-2 = "ami-0f57b4cec24530068"
    us-west-1 = "ami-0affa0c1e0ada22b4"
    us-west-2 = "ami-001628438d5d7d524"
    ap-southeast-1 = "ami-0fab0953c3bb514a9"
    ap-southeast-2 = "ami-007b2c28096a63f37"
  }
}

variable "type" {
  default = ""
}

TO OUTPUT INSTANCE DETAILS:

resource "aws_instance" "trainer" {
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "${var.type}"
  key_name = "trainer"
  vpc_security_group_ids = ["${aws_security_group.trainer.id}"]
  user_data = <<EOF
    #!/bin/bash
    sudo yum update -y
    sudo yum install httpd -y
    sudo systemctl start httpd
    sudo systemctl enable httpd
    echo "Apache Deployed via terraform" | sudo tee /var/www/html/index.html
  EOF
  tags = {
    Name = "trainer-ec2"
  }
}
output "instance_id" {
  description = "EC2 Instance id is"
  value = aws_instance.trainer.id
}
output "instance_public_ip" {
  description = "Public Ip of the EC2 Instance is"
  value = aws_instance.trainer.public_ip
}

terraform apply

terraform output

-------------------------------------------------------------------------------------------------------------------
(Follow the same order)

provider.tf:

provider "aws" {
  access_key = "AKIAU4VT5HACZCCRBBVO"
  secret_key = "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"
  region = "ap-southeast-1"
}

vpc.tf:

resource "aws_vpc" "vpc" {
  cidr_block = "${var.vpccidr}"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "trainee17-VPC"
  }
}

publicsubnet.tf:

resource "aws_subnet" "public_subnet" {
  vpc_id = "${aws_vpc.vpc.id}"
  cidr_block = "${var.publiccidr}"
  map_public_ip_on_launch = true
  availability_zone = "${var.avzone}"
  tags = {
    Name = "trainee17-public"
  }
}

privatesubnet.tf:

resource "aws_subnet" "private_subnet" {
  vpc_id = "${aws_vpc.vpc.id}"
  cidr_block = "${var.privatecidr}"
  availability_zone = "${var.avzone}"
  tags = {
    Name = "trainee17-private"
  }
}

internetgateway.tf:

resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name = "trainee17-igw"
  }
}
resource "aws_route" "internet_access" {
  route_table_id = "${aws_vpc.vpc.main_route_table_id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = "${aws_internet_gateway.gw.id}"
}

eip.tf:

resource "aws_eip" "eip" {
  vpc = true
  tags = {
    Name = "trainee17-eip"
  }
  depends_on = ["aws_internet_gateway.gw"]
}

nat.tf:

resource "aws_nat_gateway" "nat" {
  allocation_id = "${aws_eip.eip.id}"
  subnet_id = "${aws_subnet.public_subnet.id}"
  tags = {
    Name = "trainee17-nat"
  }
  depends_on = ["aws_eip.eip"]
}

publicroute.tf:  (route_table+route+route_association)

resource "aws_route_table" "public_route_table" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name = "trainer-publicroutetable"
  }
}
resource "aws_route" "public_route" {
  route_table_id = "${aws_route_table.public_route_table.id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = "${aws_internet_gateway.gw.id}"
}
resource "aws_route_table_association" "public_subnet_association" {
  subnet_id = "${aws_subnet.public_subnet.id}"
  route_table_id = "${aws_route_table.public_route_table.id}"
}

privateroute.tf:   (here, it routes to nat gateway)

resource "aws_route_table" "private_route_table" {
  vpc_id = "${aws_vpc.vpc.id}"
  tags = {
    Name = "trainee17-privateroutetable"
  }
}
resource "aws_route" "private_route" {
  route_table_id = "${aws_route_table.private_route_table.id}"
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id = "${aws_nat_gateway.nat.id}"
}
resource "aws_route_table_association" "private_subnet_association" {
  subnet_id = "${aws_subnet.private_subnet.id}"
  route_table_id = "${aws_route_table.private_route_table.id}"
}

public_sg.tf:

resource "aws_security_group" "public_sg" {
  vpc_id = "${aws_vpc.vpc.id}"
  name = "trainee17-public_securitygroup"
  tags = {
    Name = "trainee17-public_securitygroup"
  }
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

private_sg.tf:

resource "aws_security_group" "private_sg" {
  vpc_id = "${aws_vpc.vpc.id}"
  name = "trainee17-private_securitygroup"
  tags = {
    Name = "trainee17-private_securitygroup"
  }
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
  ingress {
    from_port = 3306
    to_port = 3306
    protocol = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

public_instance.tf:

resource "aws_instance" "web" {
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "${var.type}"
  key_name = "${var.key}"
  vpc_security_group_ids = ["${aws_security_group.public_sg.id}"]
  subnet_id = "${aws_subnet.public_subnet.id}"
  tags = {
    Name = "trainee17-web"
  }
  user_data = <<EOF
    #!/bin/bash
    sudo yum install -y httpd
    sudo systemctl start httpd
    sudo systemctl enable httpd
    echo "built via terraform" > /var/www/html/index.html
  EOF
}
output "instance_public_ip" {
  description = "Public Ip of the EC2 Instance is"
  value = aws_instance.web.public_ip
}

private_instance.tf:

resource "aws_instance" "db" {
  ami = "${lookup(var.ami, var.region)}"
  instance_type = "${var.type}"
  key_name = "${var.key}"
  subnet_id = "${aws_subnet.private_subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.private_sg.id}"]
  tags = {
    Name = "trainee17-database"
  }
  user_data = <<EOF
    #!/bin/bash
    yum update -y
    yum install -y mysql55-server
    systemctl start mysqld
    systemctl enable mysqld
  EOF
}
output "instance_private_ip" {
  description = "Private Ip of the DB EC2 Instance is"
  value = aws_instance.db.private_ip
}

variable.tf:

variable "vpccidr" {
  default = "10.0.0.0/16"
}
variable "avzone" {
  default = "ap-southeast-1a"
}
variable "publiccidr" {
  default = "10.0.1.0/24"
}
variable "privatecidr" {
  default = "10.0.2.0/24"
}
variable "region" {
  default = "ap-southeast-1"
}
variable "ami" {
  type = map
  default = {
    us-east-1 = "ami-048f6ed62451373d9"
    us-east-2 = "ami-0f57b4cec24530068"
    us-west-1 = "ami-0affa0c1e0ada22b4"
    us-west-2 = "ami-001628438d5d7d524"
    ap-southeast-1 = "ami-0fab0953c3bb514a9"
    ap-southeast-2 = "ami-007b2c28096a63f37"
  }
}
variable "type" {
  default = "t3a.micro"
}
variable "key" {
  default = "trainee17"
}

------------------------------------------------------------------------------------------------------------------------------------

S3 BUCKET AND SAVING TERRAFORM STATE:

setup.tf:

resource "aws_s3_bucket" "terraform-trainee17" {
  bucket = "trainee17-terraform-state-3004"
  versioning {
    enabled = false
  }
  lifecycle {
    prevent_destroy = false
  }
  tags = {
    Name = "trainee17-terraform-state"
  }
}
resource "aws_dynamodb_table" "trainee17-lock" {
  name = "trainee17-terraform-lock"
  hash_key = "LockID"
  read_capacity = 20
  write_capacity =20
  attribute {
    name = "LockID"
    type = "S"
  }
  tags = {
   Name = "trainee17-terraform-lock"
  }
}

terraform apply

provider.tf:

provider "aws" {
  access_key = "AKIAU4VT5HAC246MTHLL"
  secret_key = "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"
  region = "ap-southeast-2"
}
terraform {
  backend "s3" {
    encrypt = true
    bucket = "trainee17-terraform-state-3004"
    region = "ap-southeast-2"
    #dynamodb_table = "trainee17-terraform-lock"
    key = "terraform.tfstate"
 }
}

terraform init -backend-config="access_key=AKIAU4VT5HACZCCRBBVO" -backend-config="secret_key=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"

(Uncomment the hash and run terraform apply again and see that under s3 bucket on aws, the terraform.state will be saved)









